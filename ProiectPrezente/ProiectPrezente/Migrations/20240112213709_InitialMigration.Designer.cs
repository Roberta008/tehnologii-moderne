// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using ProiectPrezente.Database;

#nullable disable

namespace ProiectPrezente.Migrations
{
    [DbContext(typeof(DatabaseContext))]
    [Migration("20240112213709_InitialMigration")]
    partial class InitialMigration
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("ProiectPrezente.Models.Classes.Attendance", b =>
                {
                    b.Property<long>("AttendanceID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("ATTENDANCE_ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("AttendanceID"));

                    b.Property<long>("ClassID")
                        .HasColumnType("bigint")
                        .HasColumnName("CLASS_ID");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2")
                        .HasColumnName("DATE");

                    b.Property<bool>("IsPresent")
                        .HasColumnType("bit")
                        .HasColumnName("IS_PRESENT");

                    b.Property<long>("StudentID")
                        .HasColumnType("bigint")
                        .HasColumnName("STUDENT_ID");

                    b.HasKey("AttendanceID");

                    b.HasIndex("ClassID");

                    b.HasIndex("StudentID");

                    b.ToTable("ATTENDANCES");
                });

            modelBuilder.Entity("ProiectPrezente.Models.Classes.Class", b =>
                {
                    b.Property<long>("ClassID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("CLASS_ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("ClassID"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("CLASS_NAME");

                    b.Property<int>("Type")
                        .HasColumnType("int")
                        .HasColumnName("CLASS_TYPE");

                    b.HasKey("ClassID");

                    b.ToTable("CLASSES");
                });

            modelBuilder.Entity("ProiectPrezente.Models.Classes.ClassTeacher", b =>
                {
                    b.Property<long>("ClassID")
                        .HasColumnType("bigint")
                        .HasColumnName("CLASS_ID");

                    b.Property<long>("ProfessorID")
                        .HasColumnType("bigint")
                        .HasColumnName("PROFESSOR_ID");

                    b.HasKey("ClassID", "ProfessorID");

                    b.HasIndex("ProfessorID");

                    b.ToTable("CLASS_TEACHERS");
                });

            modelBuilder.Entity("ProiectPrezente.Models.Classes.Enrollment", b =>
                {
                    b.Property<long>("StudentID")
                        .HasColumnType("bigint")
                        .HasColumnName("STUDENT_ID");

                    b.Property<long>("ClassID")
                        .HasColumnType("bigint")
                        .HasColumnName("CLASS_ID");

                    b.HasKey("StudentID", "ClassID");

                    b.HasIndex("ClassID");

                    b.ToTable("ENROLLMENTS");
                });

            modelBuilder.Entity("ProiectPrezente.Models.Users.User", b =>
                {
                    b.Property<long>("UserID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("USER_ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("UserID"));

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("PASSWORD");

                    b.Property<int>("UserType")
                        .HasColumnType("int")
                        .HasColumnName("USER_TYPE");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("USERNAME");

                    b.HasKey("UserID");

                    b.ToTable("USERS");
                });

            modelBuilder.Entity("ProiectPrezente.Models.Users.UserDetails", b =>
                {
                    b.Property<long>("DetailsID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("DETAILS_ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("DetailsID"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("EMAIL");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("FIRST_NAME");

                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("GENDER");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("LAST_NAME");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("PHONE_NUMBER");

                    b.Property<long>("UserID")
                        .HasColumnType("bigint");

                    b.HasKey("DetailsID");

                    b.HasIndex("UserID")
                        .IsUnique();

                    b.ToTable("USER_DETAILS");
                });

            modelBuilder.Entity("ProiectPrezente.Models.Classes.Attendance", b =>
                {
                    b.HasOne("ProiectPrezente.Models.Classes.Class", "Class")
                        .WithMany("Attendances")
                        .HasForeignKey("ClassID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ProiectPrezente.Models.Users.User", "Student")
                        .WithMany("Attendances")
                        .HasForeignKey("StudentID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Class");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("ProiectPrezente.Models.Classes.ClassTeacher", b =>
                {
                    b.HasOne("ProiectPrezente.Models.Classes.Class", "Class")
                        .WithMany("Teachers")
                        .HasForeignKey("ClassID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ProiectPrezente.Models.Users.User", "Professor")
                        .WithMany("ClassesTaught")
                        .HasForeignKey("ProfessorID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Class");

                    b.Navigation("Professor");
                });

            modelBuilder.Entity("ProiectPrezente.Models.Classes.Enrollment", b =>
                {
                    b.HasOne("ProiectPrezente.Models.Classes.Class", "Class")
                        .WithMany("Enrollments")
                        .HasForeignKey("ClassID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ProiectPrezente.Models.Users.User", "Student")
                        .WithMany("Enrollments")
                        .HasForeignKey("StudentID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Class");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("ProiectPrezente.Models.Users.UserDetails", b =>
                {
                    b.HasOne("ProiectPrezente.Models.Users.User", "User")
                        .WithOne("UserDetails")
                        .HasForeignKey("ProiectPrezente.Models.Users.UserDetails", "UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("ProiectPrezente.Models.Classes.Class", b =>
                {
                    b.Navigation("Attendances");

                    b.Navigation("Enrollments");

                    b.Navigation("Teachers");
                });

            modelBuilder.Entity("ProiectPrezente.Models.Users.User", b =>
                {
                    b.Navigation("Attendances");

                    b.Navigation("ClassesTaught");

                    b.Navigation("Enrollments");

                    b.Navigation("UserDetails");
                });
#pragma warning restore 612, 618
        }
    }
}
